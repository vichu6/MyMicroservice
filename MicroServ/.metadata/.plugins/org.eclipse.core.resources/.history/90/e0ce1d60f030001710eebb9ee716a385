package mycode.microservice.service.ServiceDiscovery;

import java.util.List;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.ServiceInstance;
import org.springframework.cloud.client.discovery.DiscoveryClient;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@EnableDiscoveryClient
@SpringBootApplication
public class ServiceDiscoverClientApplication {

	public static void main(String[] args) {
		System.setProperty("spring.config.name", "service-client");
		SpringApplication.run(ServiceDiscoverClientApplication.class, args);

	}

}

@RestController
class ServiceInstanceRestController {

    @Autowired
    private DiscoveryClient discoveryClient;

    @RequestMapping("/service-instances/{applicationName}")
    public List<ServiceInstance> serviceInstancesByApplicationName(
            @PathVariable String applicationName) {
        return this.discoveryClient.getInstances(applicationName);
    }
    
    @RequestMapping("/service-instances")
    public List<String> serviceInstancesByApplicationName(
            ) {
        return this.discoveryClient.getServices();
        		
    }
    
    @SuppressWarnings("deprecation")
	@RequestMapping("/service-instances-details")
    public List<String> serviceInstancesDetails(
            ) {
    	List<String> myList = null;
    	for (String svc : discoveryClient.getServices()) {
    		myList.add(svc);
			List<ServiceInstance> instances = discoveryClient.getInstances(svc);
			for (ServiceInstance si : instances) {
				myList.add("\t"+ " Service "+si.toString() +" Host "+si.getHost());
						
			}
		}
    	
        return myList;
        		
    }
}
